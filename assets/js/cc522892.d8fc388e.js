"use strict";(self.webpackChunklearngenomics_dev=self.webpackChunklearngenomics_dev||[]).push([[968],{3905:function(e,t,a){a.d(t,{Zo:function(){return d},kt:function(){return g}});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=n.createContext({}),m=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},d=function(e){var t=m(e.components);return n.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),p=m(a),g=r,u=p["".concat(l,".").concat(g)]||p[g]||c[g]||o;return a?n.createElement(u,s(s({ref:t},d),{},{components:a})):n.createElement(u,s({ref:t},d))}));function g(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,s=new Array(o);s[0]=p;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:r,s[1]=i;for(var m=2;m<o;m++)s[m]=a[m];return n.createElement.apply(null,s)}return n.createElement.apply(null,a)}p.displayName="MDXCreateElement"},8648:function(e,t,a){a.r(t),a.d(t,{assets:function(){return d},contentTitle:function(){return l},default:function(){return g},frontMatter:function(){return i},metadata:function(){return m},toc:function(){return c}});var n=a(7462),r=a(3366),o=(a(7294),a(3905)),s=["components"],i={title:"Common Genomics Tools",track:"Engineering Ecosystem"},l=void 0,m={unversionedId:"engineering-ecosystem/common-genomics-tools",id:"engineering-ecosystem/common-genomics-tools",title:"Common Genomics Tools",description:"Bioinformatics programmers rely on a growing array of tools written by research scientists. These tools were developed for diverse purposes and were written in different languages. The tools run at different levels of efficiency and differ in reliability. Over time the community of bioinformaticians have built up resources to identify the best packages and handle any quirks or deficiencies they may have. Online resources like GitHub, StackOverflow, and Biostars answer questions and offer community support. Further, developers have provided new tools and methods to ease common problems.",source:"@site/docs/05-engineering-ecosystem/02-common-genomics-tools.md",sourceDirName:"05-engineering-ecosystem",slug:"/engineering-ecosystem/common-genomics-tools",permalink:"/docs/engineering-ecosystem/common-genomics-tools",draft:!1,editUrl:"https://github.com/stjude/learngenomics.dev/tree/main/docs/05-engineering-ecosystem/02-common-genomics-tools.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"Common Genomics Tools",track:"Engineering Ecosystem"},sidebar:"tutorialSidebar",previous:{title:"Data Sources",permalink:"/docs/engineering-ecosystem/data-sources"},next:{title:"Worked Example",permalink:"/docs/engineering-ecosystem/end-to-end-example"}},d={},c=[{value:"Common Tools, Packages, &amp; Ecosystems",id:"common-tools-packages--ecosystems",level:2},{value:"Sequence Alignment",id:"sequence-alignment",level:3},{value:"File/Data Manipulation",id:"filedata-manipulation",level:3},{value:"Future Tools",id:"future-tools",level:2}],p={toc:c};function g(e){var t=e.components,a=(0,r.Z)(e,s);return(0,o.kt)("wrapper",(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Bioinformatics programmers rely on a growing array of tools written by research scientists. These tools were developed for diverse purposes and were written in different languages. The tools run at different levels of efficiency and differ in reliability. Over time the community of bioinformaticians have built up resources to identify the best packages and handle any quirks or deficiencies they may have. Online resources like GitHub, StackOverflow, and Biostars answer questions and offer community support. Further, developers have provided new tools and methods to ease common problems."),(0,o.kt)("p",null,"A common problem is installation and dependency conflicts. While there is no perfect system for coordinating the installation of software, ",(0,o.kt)("a",{parentName:"p",href:"https://bioconda.github.io/"},"Bioconda"),' comes close. Bioconda is a channel of bioinformatics software "recipes" that can be built into conda packages.\xa0',(0,o.kt)("a",{parentName:"p",href:"https://docs.conda.io/en/latest/"},"conda"),"\xa0is a package manager that is language and platform independent and is designed to simplify the distribution, installation and management of software packages into stand-alone virtual environments that ensure no version or dependency conflicts.\xa0conda\xa0helps end users easily install packages from other repositories, such as pip, CRAN, CPAN, and Bioconductor. We strongly recommend the use of\xa0conda and bioconda, since they are emerging as the modern way to install and utilize genomics tools."),(0,o.kt)("h2",{id:"common-tools-packages--ecosystems"},"Common Tools, Packages, & Ecosystems"),(0,o.kt)("p",null,"There exist thousands of tools utilized in bioinformatics and genomics. Some are very esoteric and used only by a few researchers. Others are much more ubiquitous. For some tasks, there may be dozens of options; for others, there may be only one. The following is a list of common tools that are used extensively and well-regarded as reliable, organized by generic types of tasks. This list provides only a starting point to learn about common tools."),(0,o.kt)("h3",{id:"sequence-alignment"},"Sequence Alignment"),(0,o.kt)("p",null,"One of the earliest challenges of genomics was the task of sequence alignment. Sequence alignment at its most basic looks for similarity between two or more sequences. This is done in a high-throughput manner with tens of millions of reads in next-gen sequencing assays such as exome-seq, RNA-seq, ChIP-seq, and more."),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"th"},"Tool")),(0,o.kt)("th",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"th"},"Description")),(0,o.kt)("th",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"th"},"Use Cases")))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"td"},(0,o.kt)("a",{parentName:"strong",href:"https://blast.ncbi.nlm.nih.gov/Blast.cgi"},"BLAST")," (web), ",(0,o.kt)("a",{parentName:"strong",href:"https://blast.ncbi.nlm.nih.gov/Blast.cgi?CMD=Web&PAGE_TYPE=BlastDocs&DOC_TYPE=Download"},"CLI"))),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"td"},"B"),"asic ",(0,o.kt)("strong",{parentName:"td"},"L"),"ocal ",(0,o.kt)("strong",{parentName:"td"},"A"),"lignment ",(0,o.kt)("strong",{parentName:"td"},"S"),"earch ",(0,o.kt)("strong",{parentName:"td"},"T"),'ool. It is used to find biological similarity between a query sequence and database of sequences. BLAST comes in different forms that can test DNA, RNA or protein sequences and was developed to improve alignment speed which is necessary to perform the large-scale scans. BLAST uses a rule-based similarity metric that is an approximation of slower more exact methods so BLAST is not guaranteed to find the best alignment and may miss potential alignments. It works by first finding short sequences or "words" from the query sequence, ignoring low complexity words. Then, BLAST uses the best words as "seeds" to find likely sequences. Only sequences in the database that have exact seed matches are retained and tested. This greatly reduces the search space speeding up the test. For matched sequences, the region around the seed is extended in both directions and scored for similarity with the query sequence. If the overall score increases, it is extended further; if not, the extension stops. BLAST retains the best score for each test sequence and reports those that pass a statistical test. BLAST has been used extensively to identify genes with similar functions across multiple species.'),(0,o.kt)("td",{parentName:"tr",align:null},"Flexible sequence alignment against a database of sequences")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"td"},(0,o.kt)("a",{parentName:"strong",href:"https://genome.ucsc.edu/cgi-bin/hgBlat"},"BLAT")," (web), ",(0,o.kt)("a",{parentName:"strong",href:"http://hgdownload.soe.ucsc.edu/admin/exe/"},"CLI"))),(0,o.kt)("td",{parentName:"tr",align:null},"The ",(0,o.kt)("strong",{parentName:"td"},"B"),"LAST-",(0,o.kt)("strong",{parentName:"td"},"l"),"ike ",(0,o.kt)("strong",{parentName:"td"},"A"),"lignment ",(0,o.kt)("strong",{parentName:"td"},"T"),"ool (BLAT) is an alignment tool that works like BLAST but is designed to test against genomes rather than discrete sequences. BLAT tests for short perfect or near-perfect matches and works well matching sequences with a high degree of similarity. BLAT gets its speed by using an indexed version of the genome or database which it retains in memory. BLAT combines more HSPs into larger alignments compared to BLAST."),(0,o.kt)("td",{parentName:"tr",align:null},"Identification of near perfect matches for query in a genome")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"td"},(0,o.kt)("a",{parentName:"strong",href:"http://bio-bwa.sourceforge.net/"},"BWA"))),(0,o.kt)("td",{parentName:"tr",align:null},"Though foundational in the field, BLAST and BLAT were not designed to handle the large-scale alignment of millions of short sequences to a reference genome. The ",(0,o.kt)("strong",{parentName:"td"},"B"),"urrows ",(0,o.kt)("strong",{parentName:"td"},"W"),"heeler ",(0,o.kt)("strong",{parentName:"td"},"A"),"ligner, or ",(0,o.kt)("a",{parentName:"td",href:"http://bio-bwa.sourceforge.net/"},"BWA"),", was developed to do exactly this task. This software relies on the ",(0,o.kt)("strong",{parentName:"td"},"B"),"urrows ",(0,o.kt)("strong",{parentName:"td"},"W"),"heeler ",(0,o.kt)("strong",{parentName:"td"},"T"),"ransform (BWT) that changes strings into a sorted array of all suffixes of a string. This is a space saving reversible transform that speeds up alignment so that large scale genomic studies can be completed in a timely manner. The reference genome is transformed once and is then used repeatedly for alignment tasks. BWA includes methods for mapping single and paired-end reads and is commonly used for short-read (70bp to a few kilobases) DNA mapping."),(0,o.kt)("td",{parentName:"tr",align:null},"Short read alignment (70bp-a few KB) - WGS/WES/ChIP-seq, etc.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"td"},(0,o.kt)("a",{parentName:"strong",href:"https://github.com/alexdobin/STAR"},"STAR"))),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"https://github.com/alexdobin/STAR"},"STAR")," is an RNA-seq aligner for transcripts that incorporates information about splicing. STAR uses knowledge about the location of exons to index the genome and refine the search for transcript reads. This means that reads that span two exons across a splice site can be accurately mapped - not all short read aligners are capable of this."),(0,o.kt)("td",{parentName:"tr",align:null},"RNA-seq, spliced read alignment")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"td"},(0,o.kt)("a",{parentName:"strong",href:"https://github.com/lh3/minimap2"},"minimap2"))),(0,o.kt)("td",{parentName:"tr",align:null},"Minimap2 is a versatile aligner for DNA or mRNA sequences against a large reference database. Typical use cases include: (1) mapping PacBio or Oxford Nanopore genomic reads to the human genome; (2) finding overlaps between long reads with error rate up to ~15%; (3) splice-aware alignment of PacBio Iso-Seq or Nanopore cDNA or Direct RNA reads against a reference genome; (4) aligning Illumina single- or paired-end reads; (5) assembly-to-assembly alignment; (6) full-genome alignment between two closely related species with divergence below ~15%."),(0,o.kt)("td",{parentName:"tr",align:null},"Long, error-prone read alignment (PacBio, Nanopore, Iso-seq, direct RNA)")))),(0,o.kt)("h3",{id:"filedata-manipulation"},"File/Data Manipulation"),(0,o.kt)("p",null,"Data munging is an unavoidable task in genomics. Large sets of complex data formats don't make it any easier. A solid grasp of basic command line utilities such as ",(0,o.kt)("inlineCode",{parentName:"p"},"sed"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"awk"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"cut"),", and ",(0,o.kt)("inlineCode",{parentName:"p"},"grep")," are a necessity, but there are also utilities to perform common manipulations of standardized data formats available. See an incomplete list of such tools below."),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"th"},"Tool")),(0,o.kt)("th",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"th"},"Description")),(0,o.kt)("th",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"th"},"Format")),(0,o.kt)("th",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"th"},"Wrappers")))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"td"},(0,o.kt)("a",{parentName:"strong",href:"http://www.htslib.org/doc/samtools.html"},"Samtools"))),(0,o.kt)("td",{parentName:"tr",align:null},"A set of utilities used to perform common operations on SAM/BAM files. Samtools has functions to view, sort, index, merge and assess the quality of aligned sequences contained in a SAM/BAM. Further, samtools can easily transform between SAM/BAM/CRAM files."),(0,o.kt)("td",{parentName:"tr",align:null},"SAM/BAM/CRAM"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"https://bioconductor.org/packages/release/bioc/html/Rsamtools.html"},"Rsamtools")," (R), ",(0,o.kt)("a",{parentName:"td",href:"https://pysam.readthedocs.io/en/latest/?badge=latest"},"pysam")," (python)")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"td"},(0,o.kt)("a",{parentName:"strong",href:"http://www.htslib.org/doc/tabix.html"},"tabix"))),(0,o.kt)("td",{parentName:"tr",align:null},"A generic tool for indexing tab-delimited text files allowing efficient seek and retrieval. Tabix was written by the author of samtools and can search through bgzipped compressed files. The indexes it produces allow genomic viewers to efficiently view local regions. Tabix indexes sorted tab-delimited data into large intervals called ",(0,o.kt)("strong",{parentName:"td"},"bins"),". Searches for records begin by looking in bins that overlap the query interval."),(0,o.kt)("td",{parentName:"tr",align:null},"GFF/BED/SAM/VCF"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"https://bioconductor.org/packages/release/bioc/html/Rsamtools.html"},"Rsamtools")," (R), ",(0,o.kt)("a",{parentName:"td",href:"https://pysam.readthedocs.io/en/latest/?badge=latest"},"pysam")," (python)")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"td"},(0,o.kt)("a",{parentName:"strong",href:"https://samtools.github.io/bcftools/bcftools.html"},"bcftools"))),(0,o.kt)("td",{parentName:"tr",align:null},"A set of utilities that manipulate variant calls in the Variant Call Format (VCF) and its binary counterpart BCF. All commands work transparently with both VCFs and BCFs, both uncompressed and BGZF-compressed."),(0,o.kt)("td",{parentName:"tr",align:null},"VCF/BCF"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"https://bioconductor.org/packages/release/bioc/html/Rsamtools.html"},"Rsamtools")," (R), ",(0,o.kt)("a",{parentName:"td",href:"https://pysam.readthedocs.io/en/latest/?badge=latest"},"pysam")," (python)")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"td"},(0,o.kt)("a",{parentName:"strong",href:"https://bedtools.readthedocs.io/en/latest/"},"bedtools"))),(0,o.kt)("td",{parentName:"tr",align:null},"A set of tools for manipulating genomic intervals data. It is designed to be used in pipelines and is commonly used to manipulate BED, BAM, GTF/GFF, and VCF files. bedtools has functions to intersect, merge, subtract, slop, window, and sort genomic intervals. It also has functions to calculate the distance between intervals, the coverage of intervals, and the number of intervals in a file."),(0,o.kt)("td",{parentName:"tr",align:null},"BED/BAM/GTF/GFF/VCF"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"https://cran.r-project.org/web/packages/bedr/index.html"},"bedr")," (R), ",(0,o.kt)("a",{parentName:"td",href:"https://daler.github.io/pybedtools/"},"pybedtools")," (python)")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"td"},(0,o.kt)("a",{parentName:"strong",href:"https://bedops.readthedocs.io/en/latest/"},"bedops"))),(0,o.kt)("td",{parentName:"tr",align:null},"A toolkit for flexible manipulation of BED-like files. In particular, it has a variety of set operations that can be applied to any number of BED inputs and piped together to create complex manipulations. It is also highly memory efficient, and as such, able to perform operations that other tools may struggle to complete."),(0,o.kt)("td",{parentName:"tr",align:null},"BED"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"https://cran.r-project.org/web/packages/bedr/index.html"},"bedr")," (R)")))),(0,o.kt)("h2",{id:"future-tools"},"Future Tools"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Picard")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Python libraries"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"BioPython"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"R libraries"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"BioConductor"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"PERL libraries"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"BioPerl")))))}g.isMDXComponent=!0}}]);